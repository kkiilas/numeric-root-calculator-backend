{"version":3,"sources":["components/Notification.js","components/Input.js","components/Forms.js","components/Header.js","components/Headers.js","components/Row.js","components/Rows.js","components/Results.js","App.js","index.js"],"names":["Notification","message","class","Input","id","label","value","changeHandler","for","onChange","Forms","reset","validate","inputs","onSubmit","map","input","i","key","form","type","Header","text","sub","Headers","headers","header","Row","n","xi","err","Rows","rows","row","Results","length","App","useState","root","setRoot","valueIn","setValueIn","powOfErr","setPowOfErr","setRows","setMessage","calculate","x","error","Math","abs","pow","iterations","concat","Infinity","event","target","preventDefault","isNaN","setTimeout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aeb6c37b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div class=\"message\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react'\n\nconst Input = ({ id, label, value, changeHandler }) => {\n  return (\n    <>\n      <tr>\n        <td class=\"label\">\n          <label for={id}>\n            {label}\n            </label>\n        </td>\n        <td>\n          <input\n            id={id}\n            value={value}\n            onChange={changeHandler}\n          />\n        </td>\n      </tr>\n    </>\n  )\n}\n\nexport default Input","import React from 'react'\nimport Input from './Input'\n\nconst Forms = ({ reset, validate, inputs }) => {\n  return (\n    <div>\n      <form id='reset' onSubmit={reset} />\n      <form id='inputs' onSubmit={validate}>\n        <table>\n          <tbody>\n            {inputs.map((input, i) =>\n              <Input\n                key={i}\n                id={input.id}\n                label={input.label}\n                value={input.value}\n                changeHandler={input.changeHandler}\n              />)}\n            <tr>\n              <td>\n              </td>\n              <td class=\"buttons\">\n                <button form='inputs' type=\"submit\" >Calculate</button>\n                <button form='reset' type=\"submit\" >Reset</button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </form>\n    </div>\n  )\n}\n\nexport default Forms","import React from 'react'\n\nconst Header = ({ text, sub }) => {\n   return (\n    <>\n      <th>\n        {text}\n        <sub>\n        {sub}\n        </sub>\n      </th>\n    </>\n  )\n}\n\nexport default Header","import React from 'react'\nimport Header from './Header'\n\nconst Headers = ({ headers }) => {\n  return (\n    <>\n      <tr>\n        {headers.map((header, i) =>\n          <Header\n            key={i}\n            text={header.text}\n            sub={header.sub}\n          />\n        )}\n      </tr>\n    </>\n  )\n}\n\nexport default Headers","import React from 'react'\n\nconst Row = ({ n, xi, err }) => {\n  return (\n    <>\n      <tr>\n        <th>{n}</th>\n        <td>{xi}</td>\n        <td>{err}</td>\n      </tr>\n    </>\n  )\n}\n\nexport default Row","import React from 'react'\nimport Row from './Row'\n\nconst Rows = ({ rows }) => {\n  return (\n    <>\n      {rows.map((row, i) =>\n        <Row\n          key={i}\n          n={row.n}\n          xi={row.xi}\n          err={row.err}\n        />\n      )}\n    </>\n  )\n}\n\nexport default Rows","import React from 'react'\nimport Headers from './Headers'\nimport Rows from './Rows'\n\nconst Results = ({ headers, rows }) => {\n  if (rows.length === 0) {\n    return null\n  }\n  return (\n    <>\n      <table class=\"iteration\">\n        <thead>\n          <Headers headers={headers} />\n        </thead>\n        <tbody>\n          <Rows rows={rows} />\n        </tbody>\n      </table>\n    </>\n  )\n}\n\nexport default Results","import React, { useState } from 'react'\nimport Notification from './components/Notification'\nimport Forms from './components/Forms'\nimport Results from './components/Results'\n\nconst App = () => {\n  const [root, setRoot] = useState('')\n  const [valueIn, setValueIn] = useState('')\n  const [powOfErr, setPowOfErr] = useState(-4)\n  const [rows, setRows] = useState([])\n  const [message, setMessage] = useState(null)\n\n  const handleRootChange = (event) => setRoot(event.target.value)\n\n  const handleValueInChange = (event) => setValueIn(event.target.value)\n\n  const handlePowOfErrChange = (event) => setPowOfErr(event.target.value)\n\n  const validate = (event) => {\n    event.preventDefault()\n    setRows([])\n    if (isNaN(root) || isNaN(valueIn) || isNaN(powOfErr)) {\n      if (isNaN(root)) {\n        setMessage('Root must be a number')\n        setTimeout(() => {\n          setMessage(null)\n        }, 3000)\n      } else if (isNaN(valueIn)) {\n        setMessage('The number that the root is taken of, must be a number')\n        setTimeout(() => {\n          setMessage(null)\n        }, 3000)\n      } else if (isNaN(powOfErr)) {\n        setMessage('The power of ten for the margin of error must be a number')\n        setTimeout(() => {\n          setMessage(null)\n        }, 3000)\n      }\n    } else if (root < 1) {\n      setMessage('Root must be a positive number greater than or equal to 1')\n      setTimeout(() => {\n        setMessage(null)\n      }, 3000)\n    } else if (valueIn < 0) {\n      if (root % 1 !== 0) {\n        setMessage('Root must be an integer while its taken of a negative number. Enter either a root that is an integer or a positive number that the root is taken of.')\n        setTimeout(() => {\n          setMessage(null)\n        }, 9000)\n      } else if (root % 2 === 0) {\n        setMessage('The result is a complex number. Enter either an odd root or a positive number that the root is taken of.')\n        setTimeout(() => {\n          setMessage(null)\n        }, 6000)\n      } else {\n        calculate()\n      }\n    } else {\n      calculate()\n    }\n  }\n\n  const calculate = () => {\n    setMessage(null)\n    setRows(rows.length = 0)\n    let x = valueIn / root\n\n    const error = (x) => {\n      return Math.abs(1 - Math.pow(x, root) / valueIn)\n    }\n\n    let iterations = [{\n      n: 0,\n      xi: x,\n      err: error(x)\n    }]\n\n    while (error(x) >= Math.pow(10, powOfErr)) {\n      x = x - (Math.pow(x, root) - valueIn) / (root * Math.pow(x, root - 1))\n\n      iterations = iterations.concat({\n        n: iterations.length,\n        xi: x,\n        err: error(x)\n      })\n\n      if (iterations[iterations.length - 1].err === Infinity) {\n        break\n      }\n    }\n    setRows(rows.concat(iterations))\n  }\n\n  const reset = () => {\n    setRows([])\n    setRoot('')\n    setValueIn('')\n    setPowOfErr(-4)\n  }\n\n  const inputs = [{\n    id: 'root',\n    label: 'Root:',\n    value: root,\n    changeHandler: handleRootChange\n  },\n  {\n    id: 'valueIn',\n    label: 'Number that the root is taken of:',\n    value: valueIn,\n    changeHandler: handleValueInChange\n  },\n  {\n    id: 'Margin of error',\n    label: 'Margin of error is 10 to the power of:',\n    value: powOfErr,\n    changeHandler: handlePowOfErrChange\n  }]\n\n  const headers = [\n    {\n      text: 'Iteration',\n      sub: '',\n    },\n    {\n      text: 'x',\n      sub: 'i',\n    },\n    {\n      text: 'Error',\n      sub: '',\n    }\n  ]\n\n  return (\n    <div>\n      <h1>Numeric Root Calculator</h1>\n      <Notification message={message} />\n      <table class=\"layout\">\n        <tbody>\n          <tr>\n            <td>\n              <Forms\n                reset={reset}\n                validate={validate}\n                inputs={inputs}\n              />\n            </td>\n          </tr>\n          <tr>\n            <td class=\"layout\">\n              <Results\n                headers={headers}\n                rows={rows}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}